// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.weatherexercise.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class CityJsonAdapter(
  moshi: Moshi
) : JsonAdapter<City>() {
  private val options: JsonReader.Options = JsonReader.Options.of("coord", "country", "id", "name",
      "population", "sunrise", "sunset", "timezone")

  private val nullableCoordAdapter: JsonAdapter<Coord?> = moshi.adapter(Coord::class.java,
      emptySet(), "coord")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "country")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "id")

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("City").append(')') }

  public override fun fromJson(reader: JsonReader): City {
    var coord: Coord? = null
    var country: String? = null
    var id: Double? = null
    var name: String? = null
    var population: Double? = null
    var sunrise: Double? = null
    var sunset: Double? = null
    var timezone: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> coord = nullableCoordAdapter.fromJson(reader)
        1 -> country = nullableStringAdapter.fromJson(reader)
        2 -> id = nullableDoubleAdapter.fromJson(reader)
        3 -> name = nullableStringAdapter.fromJson(reader)
        4 -> population = nullableDoubleAdapter.fromJson(reader)
        5 -> sunrise = nullableDoubleAdapter.fromJson(reader)
        6 -> sunset = nullableDoubleAdapter.fromJson(reader)
        7 -> timezone = nullableDoubleAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return City(
        coord = coord,
        country = country,
        id = id,
        name = name,
        population = population,
        sunrise = sunrise,
        sunset = sunset,
        timezone = timezone
    )
  }

  public override fun toJson(writer: JsonWriter, value_: City?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("coord")
    nullableCoordAdapter.toJson(writer, value_.coord)
    writer.name("country")
    nullableStringAdapter.toJson(writer, value_.country)
    writer.name("id")
    nullableDoubleAdapter.toJson(writer, value_.id)
    writer.name("name")
    nullableStringAdapter.toJson(writer, value_.name)
    writer.name("population")
    nullableDoubleAdapter.toJson(writer, value_.population)
    writer.name("sunrise")
    nullableDoubleAdapter.toJson(writer, value_.sunrise)
    writer.name("sunset")
    nullableDoubleAdapter.toJson(writer, value_.sunset)
    writer.name("timezone")
    nullableDoubleAdapter.toJson(writer, value_.timezone)
    writer.endObject()
  }
}
