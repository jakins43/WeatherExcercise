// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.weatherexercise.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class ForecastDetailsJsonAdapter(
  moshi: Moshi
) : JsonAdapter<ForecastDetails>() {
  private val options: JsonReader.Options = JsonReader.Options.of("clouds", "dt", "dt_txt", "main",
      "pop", "rain", "sys", "visibility", "weather", "wind")

  private val nullableCloudsAdapter: JsonAdapter<Clouds?> = moshi.adapter(Clouds::class.java,
      emptySet(), "clouds")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "dt")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "dtTxt")

  private val nullableMainAdapter: JsonAdapter<Main?> = moshi.adapter(Main::class.java, emptySet(),
      "main")

  private val nullableRainAdapter: JsonAdapter<Rain?> = moshi.adapter(Rain::class.java, emptySet(),
      "rain")

  private val nullableSysAdapter: JsonAdapter<Sys?> = moshi.adapter(Sys::class.java, emptySet(),
      "sys")

  private val nullableListOfWeatherAdapter: JsonAdapter<List<Weather>?> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Weather::class.java), emptySet(),
      "weather")

  private val nullableWindAdapter: JsonAdapter<Wind?> = moshi.adapter(Wind::class.java, emptySet(),
      "wind")

  public override fun toString(): String = buildString(37) {
      append("GeneratedJsonAdapter(").append("ForecastDetails").append(')') }

  public override fun fromJson(reader: JsonReader): ForecastDetails {
    var clouds: Clouds? = null
    var dt: Double? = null
    var dtTxt: String? = null
    var main: Main? = null
    var pop: Double? = null
    var rain: Rain? = null
    var sys: Sys? = null
    var visibility: Double? = null
    var weather: List<Weather>? = null
    var wind: Wind? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> clouds = nullableCloudsAdapter.fromJson(reader)
        1 -> dt = nullableDoubleAdapter.fromJson(reader)
        2 -> dtTxt = nullableStringAdapter.fromJson(reader)
        3 -> main = nullableMainAdapter.fromJson(reader)
        4 -> pop = nullableDoubleAdapter.fromJson(reader)
        5 -> rain = nullableRainAdapter.fromJson(reader)
        6 -> sys = nullableSysAdapter.fromJson(reader)
        7 -> visibility = nullableDoubleAdapter.fromJson(reader)
        8 -> weather = nullableListOfWeatherAdapter.fromJson(reader)
        9 -> wind = nullableWindAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return ForecastDetails(
        clouds = clouds,
        dt = dt,
        dtTxt = dtTxt,
        main = main,
        pop = pop,
        rain = rain,
        sys = sys,
        visibility = visibility,
        weather = weather,
        wind = wind
    )
  }

  public override fun toJson(writer: JsonWriter, value_: ForecastDetails?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("clouds")
    nullableCloudsAdapter.toJson(writer, value_.clouds)
    writer.name("dt")
    nullableDoubleAdapter.toJson(writer, value_.dt)
    writer.name("dt_txt")
    nullableStringAdapter.toJson(writer, value_.dtTxt)
    writer.name("main")
    nullableMainAdapter.toJson(writer, value_.main)
    writer.name("pop")
    nullableDoubleAdapter.toJson(writer, value_.pop)
    writer.name("rain")
    nullableRainAdapter.toJson(writer, value_.rain)
    writer.name("sys")
    nullableSysAdapter.toJson(writer, value_.sys)
    writer.name("visibility")
    nullableDoubleAdapter.toJson(writer, value_.visibility)
    writer.name("weather")
    nullableListOfWeatherAdapter.toJson(writer, value_.weather)
    writer.name("wind")
    nullableWindAdapter.toJson(writer, value_.wind)
    writer.endObject()
  }
}
