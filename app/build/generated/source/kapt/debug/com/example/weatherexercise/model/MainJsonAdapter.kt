// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN")

package com.example.weatherexercise.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.Double
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.emptySet
import kotlin.text.buildString

public class MainJsonAdapter(
  moshi: Moshi
) : JsonAdapter<Main>() {
  private val options: JsonReader.Options = JsonReader.Options.of("feels_like", "grnd_level",
      "humidity", "pressure", "sea_level", "temp", "temp_kf", "temp_max", "temp_min")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "feelsLike")

  public override fun toString(): String = buildString(26) {
      append("GeneratedJsonAdapter(").append("Main").append(')') }

  public override fun fromJson(reader: JsonReader): Main {
    var feelsLike: Double? = null
    var grndLevel: Double? = null
    var humidity: Double? = null
    var pressure: Double? = null
    var seaLevel: Double? = null
    var temp: Double? = null
    var tempKf: Double? = null
    var tempMax: Double? = null
    var tempMin: Double? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> feelsLike = nullableDoubleAdapter.fromJson(reader)
        1 -> grndLevel = nullableDoubleAdapter.fromJson(reader)
        2 -> humidity = nullableDoubleAdapter.fromJson(reader)
        3 -> pressure = nullableDoubleAdapter.fromJson(reader)
        4 -> seaLevel = nullableDoubleAdapter.fromJson(reader)
        5 -> temp = nullableDoubleAdapter.fromJson(reader)
        6 -> tempKf = nullableDoubleAdapter.fromJson(reader)
        7 -> tempMax = nullableDoubleAdapter.fromJson(reader)
        8 -> tempMin = nullableDoubleAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Main(
        feelsLike = feelsLike,
        grndLevel = grndLevel,
        humidity = humidity,
        pressure = pressure,
        seaLevel = seaLevel,
        temp = temp,
        tempKf = tempKf,
        tempMax = tempMax,
        tempMin = tempMin
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Main?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("feels_like")
    nullableDoubleAdapter.toJson(writer, value_.feelsLike)
    writer.name("grnd_level")
    nullableDoubleAdapter.toJson(writer, value_.grndLevel)
    writer.name("humidity")
    nullableDoubleAdapter.toJson(writer, value_.humidity)
    writer.name("pressure")
    nullableDoubleAdapter.toJson(writer, value_.pressure)
    writer.name("sea_level")
    nullableDoubleAdapter.toJson(writer, value_.seaLevel)
    writer.name("temp")
    nullableDoubleAdapter.toJson(writer, value_.temp)
    writer.name("temp_kf")
    nullableDoubleAdapter.toJson(writer, value_.tempKf)
    writer.name("temp_max")
    nullableDoubleAdapter.toJson(writer, value_.tempMax)
    writer.name("temp_min")
    nullableDoubleAdapter.toJson(writer, value_.tempMin)
    writer.endObject()
  }
}
